language: cpp
sudo: false
matrix:
  include:
  - os: linux
    dist: xenial
    addons:
      apt:
        packages:
        - doxygen
        - liblua5.2-0
        - flex
        - bison
        - graphviz
    env:
    - Documentation=On
    before_install:
    - openssl aes-256-cbc -K $encrypted_29b232b22675_key -iv $encrypted_29b232b22675_iv -in ${TRAVIS_BUILD_DIR}/util/travis/travis_ci_rsa.enc -out ${TRAVIS_BUILD_DIR}/util/travis/travis_ci_rsa -d
    install:
    - export DEPS_DIR="${TRAVIS_BUILD_DIR}/extern/binary/bin"
    - mkdir -p ${DEPS_DIR}
    - bash util/travis/build_doxygen.sh
    # - pip3 install --user pygments sphinx
    - export PATH="${TRAVIS_BUILD_DIR}/extern/binary/bin/doxygen-install/bin/:$PATH"
    script:
    - export PATH=$(python3 -m site --user-base)/bin:$PATH
    - "./docs.sh ../docs-build"
    deploy:
    - provider: script
      skip_cleanup: true
      script: bash util/travis/deploy_docs.sh
      on:
        all_branches: true

  - os: linux
    dist: xenial
    sudo: true
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb https://packages.lunarg.com/vulkan/1.1.97 xenial main'
          key_url: 'http://packages.lunarg.com/lunarg-signing-key-pub.asc'
        packages:
        - lunarg-vulkan-sdk
        - ninja-build
        - gcc-7
        - g++-7
        - lcov
        - libgl1-mesa-dev
        - libglu1-mesa-dev
        - mesa-common-dev
        - libx11-dev
        - libxcursor-dev
        - libxrandr-dev
        - libxi-dev
        - uuid-dev
    env:
    - ME="Coverage='On' && SANITIZE='Asan,UBsan' &&  CC=gcc-7 && CXX='g++-7' && TYPE='Debug'"
    install:
    - eval "${ME}"
    - bash ./util/travis/linux_deps.sh
    - cd build && $HOME/binary_root/bin/cmake .. -DCMAKE_BUILD_TYPE=Debug -DBVEREBORN_CODE_COVERAGE=On -DSANITIZE_ADDRESS=On -DSANITIZE_UNDEFINED=On -GNinja
    after_success:
    - cd ${TRAVIS_BUILD_DIR}
    # Create lcov report
    - lcov --capture --directory build/ --output-file coverage.info --gcov-tool gcov-7
    - lcov --remove coverage.info "/usr/*" "$PWD/extern/*" --output-file coverage.info
    - lcov --list coverage.info
    # Uploading report to CodeCov
    - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

  - os: linux
    dist: xenial
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - sourceline: 'deb https://packages.lunarg.com/vulkan/1.1.97 xenial main'
          key_url: 'http://packages.lunarg.com/lunarg-signing-key-pub.asc'
        packages:
        - lunarg-vulkan-sdk
        - ninja-build
        - gcc-7
        - g++-7
        - libgl1-mesa-dev
        - libglu1-mesa-dev
        - mesa-common-dev
        - libx11-dev
        - libxcursor-dev
        - libxrandr-dev
        - libxi-dev
        - uuid-dev
    env:
    - ME="Coverage='On' && CC='gcc-7' && CXX='g++-7' && TYPE='Release'"
    install:
    - eval "${ME}"
    - bash ./util/travis/linux_deps.sh
    - cd build && $HOME/binary_root/bin/cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja

  - os: linux
    dist: xenial
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-xenial-6.0
        - sourceline: 'deb https://packages.lunarg.com/vulkan/1.1.97 xenial main'
          key_url: 'http://packages.lunarg.com/lunarg-signing-key-pub.asc'
        packages:
        - lunarg-vulkan-sdk
        - ninja-build
        - libstdc++-8-dev
        - clang-6.0
        - libgl1-mesa-dev
        - libglu1-mesa-dev
        - mesa-common-dev
        - libx11-dev
        - libxcursor-dev
        - libxrandr-dev
        - libxi-dev
        - uuid-dev
    env:
    - ME="LINKER='LLD' && CC=clang-6.0 && CXX=clang++-6.0 && TYPE='Debug'"
    install:
    - eval "${ME}"
    - bash ./util/travis/linux_deps.sh
    - cd build && $HOME/binary_root/bin/cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld"
      -GNinja

  - os: linux
    dist: xenial
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-xenial-6.0
        - sourceline: 'deb https://packages.lunarg.com/vulkan/1.1.97 xenial main'
          key_url: 'http://packages.lunarg.com/lunarg-signing-key-pub.asc'
        packages:
        - lunarg-vulkan-sdk
        - ninja-build
        - libstdc++-8-dev
        - clang-6.0
        - libgl1-mesa-dev
        - libglu1-mesa-dev
        - mesa-common-dev
        - libx11-dev
        - libxcursor-dev
        - libxrandr-dev
        - libxi-dev
        - uuid-dev
    env:
    - ME="LINKER='LLD' && SANITIZE='Tsan' && CC=clang-6.0 && CXX=clang++-6.0 && TYPE='Debug'"
    install:
    - eval "${ME}"
    - bash ./util/travis/linux_deps.sh
    - cd build && $HOME/binary_root/bin/cmake .. -DCMAKE_BUILD_TYPE=Debug -DSANITIZE_Thread=On
      -DCMAKE_EXE_LINKER_FLAGS="-fuse-ld=lld" -DCMAKE_SHARED_LINKER_FLAGS="-fuse-ld=lld"
      -GNinja

  # - os: osx
  #   osx_image: xcode9.2
  #   install:
  #   - brew update
  #   - HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade cmake
  #   - HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja ossp-uuid
  #   - cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja

  # allow_failures:
  # - os: osx
  #   osx_image: xcode9.2
  #   install:
  #   - brew update
  #   - HOMEBREW_NO_AUTO_UPDATE=1 brew upgrade cmake
  #   - HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja ossp-uuid
  #   - cd build && cmake .. -DCMAKE_BUILD_TYPE=Release -GNinja

before_install:
- openssl aes-256-cbc -K $encrypted_29b232b22675_key -iv $encrypted_29b232b22675_iv -in util/travis/travis_ci_rsa.enc -out util/travis/travis_ci_rsa -d
- cd ${TRAVIS_BUILD_DIR}
- mkdir -p build
script:
- ninja -j2
- bin/tests
